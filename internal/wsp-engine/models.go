package workspaceEngine

import (
	"time"

	"github.com/google/uuid"
)

type AWorkflow struct {
	Id                int64                `json:"id"`
	ProjectId         int64                `json:"project_id"`
	Name              string               `json:"name,omitempty"`
	NameWithNamespace string               `json:"name_with_namespace,omitempty"`
	Description       string               `json:"description,omitempty"`
	Path              string               `json:"path,omitempty"`
	PathWithNamespace string               `json:"path_with_namespace,omitempty"`
	DefaultBranch     string               `json:"default_branch,omitempty"`
	Topics            []string             `json:"topics,omitempty"`
	HttpUrlToRepo     string               `json:"http_url_to_repo,omitempty"`
	WebUrl            string               `json:"web_url,omitempty"`
	StartCount        float32              `json:"start_count,omitempty"`
	Parameters        []AWorkflowParameter `json:"parameters,omitempty"`
	Schedule          ASchedule
	Type              string `json:"type"`
}

type AWorkflowParameter struct {
	Name          string   `json:"name,omitempty"`
	Description   string   `json:"description,omitempty"`
	Usage         string   `json:"usage,omitempty"`
	Displayed     bool     `json:"displayed,omitempty"`
	Type          string   `json:"type,omitempty"`
	Format        string   `json:"format,omitempty"`
	Default       string   `json:"default,omitempty"`
	Required      bool     `json:"required,omitempty"`
	AllowedValues []string `json:"allowed_values,omitempty"`
	Masked        bool     `json:"masked,omitempty"`
	ActualValues  []string `json:"actual_values,omitempty"`
}

type ListOfAWorkflows struct {
	Projects []AWorkflow
}

type AResult struct {
	Code    int32  `json:"code,omitempty"`
	Message string `json:"message,omitempty"`
}

type ASchedule struct {
	Start bool `json:"start,omitempty"`
	End   bool `json:"end,omitempty"`
}

type Problem struct {

	// An absolute URI that identifies the problem type.  When dereferenced, it SHOULD provide human-readable documentation for the problem type (e.g., using HTML).
	Type string `json:"type,omitempty"`
	// A short, summary of the problem type. Written in english and readable for engineers (usually not suited for non technical stakeholders and not localized); example: Service Unavailable
	Title string `json:"title,omitempty"`
	// The HTTP status code generated by the origin server for this occurrence of the problem.
	Status int32 `json:"status,omitempty"`
	// A human readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail,omitempty"`
	// An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
	Instance string `json:"instance,omitempty"`
}

type UsedWorkflow struct {
	Aworkflow   AWorkflow
	WorkspaceId uuid.UUID
	Status      string
	Message     string
	Timestamp   time.Time
}

type AWorkspace struct {
	Id          uuid.UUID `json:"id"`
	Name        string    `json:"name"`
	Description string    `json:"description"`
	Workflows   []AWorkflow
}

type AMessage struct {
	ObjectId    uuid.UUID `json:"objectId"`
	ObjectType  string    `json:"objectType"`
	Operation   string    `json:"operation"`
	Status      string    `json:"status"`
	Description string    `json:"description"`
}

type UsedApp struct {
	WorkflowId  int64
	Name        string
	Status      string
	WorkspaceId uuid.UUID
	Timestamp   time.Time
}

type WorkflowYml struct {
	Dependencies []WorkflowYmlDependency
}

type WorkflowYmlDependency struct {
	Name     string
	Version  string
	Source   string
	Type     string
	Packages []WorkflowPackage
}

type WorkflowPackage struct {
	Name       string
	Version    string
	Source     string
	Type       string // npm, apt, pip, python3
	CmdOptions string
}

type PromptEstimateRequest struct {
	Prompt     string `json:"prompt"`
	WorkflowId string `json:"workflowId"`
}

type PromptEstimateResponse struct {
	Status         string `json:"status,omitempty"`
	Message        string `json:"message,omitempty"`
	ConsumedTokens float32 `json:"consumedTokens"`
	Cost           string `json:"cost,omitempty"`
	Timestamp      string `json:"timestamp,omitempty"`
}

type WorkflowEstimate struct {
	Amount	string
	Units	string
	UoM		string
	Status	string
	Message	string
}
